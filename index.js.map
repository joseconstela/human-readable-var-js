{"version":3,"sources":["src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":[";(function (global) {\n  'use strict';\n\n  /**\n   * Library version\n   * @type {String}\n   */\n  let version = '0.0.2'\n\n  /**\n   * Contains the lib cache\n   * @type {Object}\n   *\n   * {\n   *  collectionName: {name:typesName}\n   * }\n   */\n  let cache = {}\n\n  /**\n   * Convert function for each datatype\n   *\n   * @type {Object}\n   */\n  let types = {\n    'Object': {\n      simple: (data) => {\n        return '<pre>'+JSON.stringify(data, null, 2)+'</pre>'\n      }\n    },\n    'boolean': { // typeof === 'boolean'\n      simple: (data) => {\n        return (data ? '✅ ' : '❌ ') +  data\n      }\n    },\n    'address': { // object containing lat & lon properties\n      simple: (data) => {\n        return link(\n          'https://www.openstreetmap.org/#map=5/',\n          `${data.lat}/${data.lng}`,\n          `📍 ${data.lat.toFixed(2)}/${data.lng.toFixed(2)}`\n        )\n      }\n    }\n  }\n\n  /**\n   * Returns an html a markup\n   *\n   * @param  {String} url    href attribute prefix\n   * @param  {String} suffix href attribute suffix\n   * @param  {String} text   a's text\n   * @param  {Object} attrs  a's attributed\n   * @return {String}        The a's html markup\n   */\n  let link = (url, sufix, text, attrs) => {\n    if (!attrs) attrs = {target:'_blank'}\n    if (!attrs.target) attrs.target = '_blank'\n\n    return `<a href=\"${url}${sufix}\" target=\"${attrs.target}\">${text}</a>`\n  }\n\n  /**\n  * @summary Constructor\n  */\n  function humanReadable () {\n    if (!(this instanceof humanReadable)) {\n      return new humanReadable();\n    }\n\n    return this;\n  };\n\n  /**\n   * Stores a value in the cache\n   *\n   * @param  {String} value   The value to store\n   * @param  {String} name    The property value belongs to\n   * @param  {String} context The collection name belongs to\n   * @return {String}         To stored value\n   */\n  let storeCache = (value, name, context) => {\n    if (!value) return false\n\n    if (!cache[context]) cache[context] = {}\n    cache[context][name] = value\n\n    return value\n  }\n\n  /**\n   * Given the variable to process, returns its type name and stores the result in\n   * the cache\n   *\n   * @param  {} data          The variable to process\n   * @param  {String} name    The property value belongs to\n   * @param  {String} context The collection name belongs to\n   * @return {String}         The variable's type\n   */\n  let process = (data, name, context) => {\n    let r = null\n\n    let tof = typeof data\n\n    if (tof === 'object') {\n      r = 'Object'\n\n      if (!!data.lat && !!data.lng) r = 'address'\n    } else if (tof === 'boolean') {\n      r = tof\n    }\n\n    return name ? storeCache(r, name, context) : r\n  }\n\n  /**\n   * Checks if the variable to convert exists in cache and returns it,\n   * or process it if not.\n   *\n   * @param  {} data          The variable to process\n   * @param  {String} name    The property value belongs to\n   * @param  {String} context The collection name belongs to\n   * @return {Sting}          Returns the value type's name\n   */\n  let getType = (value, name, context) => {\n    let r = checkCache(value, name, context)\n    return r ? r : process(value, name, context)\n  }\n\n  /**\n   * Checks if a name exists in cache.\n   *\n   * @param  {String} name    The property value belongs to\n   * @param  {String} context The collection name belongs to\n   * @return {[type]}         [description]\n   */\n  let checkCache = (name, context) => {\n    return !!cache[context] && !!cache[context][name] ? cache[context][name] : false\n  }\n\n  /**\n   * Makes the variable conversion with the 'simple' conversion.\n   *\n   * @param  {} data          The variable to process\n   * @param  {String} name    The property value belongs to\n   * @param  {String} context The collection name belongs to\n   * @return {String}         The conversion's result\n   */\n  humanReadable.prototype.simple = (value, name, context) => {\n    let t = getType(value, name, context)\n\n    if (!!types[t] && !!types[t].simple) {\n      return types[t].simple(value)\n    } else {\n      return value\n    }\n  }\n\n  /**\n   * Get the library's version\n   * @return {String}         The library's version\n   */\n  humanReadable.prototype.version = version\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(function () {\n      return humanReadable();\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    // Node and other CommonJS-like environments that support module.exports.\n    module.exports = humanReadable();\n  } else {\n    //Browser.\n    global.humanReadable = humanReadable();\n  }\n\n})(this);\n"]}